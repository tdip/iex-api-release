"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const socketIO = require("socket.io-client");
/**
 * Create an entry containing an observer that will emit values
 * produced by Socket.IO
 * @param handler Object specified what to do when the first observer
 * subscribes to the topic or when all observers unsubscribe
 */
const createEntry = (handler) => {
    const observers = [];
    const observable = rxjs_1.Observable.create((observer) => {
        observers.push(observer);
        if (observers.length === 1) {
            handler.onResumend();
        }
        return () => {
            const ix = observers.findIndex(_observer => observer === _observer);
            if (ix >= 0) {
                observers.splice(ix, 1);
                if (observers.length === 0) {
                    handler.onEmpty();
                }
            }
        };
    });
    return {
        observable,
        next(value) {
            observers.forEach(o => o.next(value));
        },
        complete() {
            observers.forEach(o => o.complete());
            observers.splice(0, observers.length);
        },
        get count() {
            return observers.length;
        }
    };
};
const endpoint = 'https://ws-api.iextrading.com/1.0/tops';
/**
 * Client for observing realtime data streams
 * produced by IEX.
 */
class IEXClientRT {
    constructor(socketBuilder) {
        this.onConnect = this.onConnect.bind(this);
        this.onMessage = this.onMessage.bind(this);
        this.subscribePending = this.subscribePending.bind(this);
        this.subscribeIfReady = this.subscribeIfReady.bind(this);
        this.getOrCreateObservable = this.getOrCreateObservable.bind(this);
        this.observe = this.observe.bind(this);
        this.isReady = false;
        this.subscriptions = {};
        socketBuilder = socketBuilder || socketIO;
        this.socket = socketBuilder(endpoint);
        this.socket.on('connect', this.onConnect);
        this.socket.on('message', this.onMessage);
    }
    onMessage(_message) {
        const message = JSON.parse(_message);
        const topic = message.symbol;
        const entry = this.subscriptions[topic];
        if (entry) {
            entry.next(message);
        }
    }
    onConnect() {
        this.isReady = true;
        this.subscribePending();
    }
    subscribePending() {
        const pending = Object.keys(this.subscriptions)
            .filter(key => this.subscriptions[key].count > 0);
        if (pending.length > 0) {
            this.socket.emit('subscribe', pending.join());
        }
    }
    subscribeIfReady(topic) {
        if (!this.isReady) {
            return;
        }
        this.socket.emit('subscribe', topic);
    }
    getOrCreateObservable(topic) {
        topic = topic.toUpperCase();
        let observable = this.subscriptions[topic];
        if (!observable) {
            this.subscriptions[topic] = observable = createEntry({
                onResumend: () => this.subscribeIfReady(topic),
                onEmpty: () => this.socket.emit('unsubscribe', topic)
            });
        }
        return observable.observable;
    }
    /**
     * Get an Observable that produces values whenever one of the
     * securities passed as parameter changes
     * @param topics The securities one wishes to subscribe
     */
    observe(...topics) {
        return rxjs_1.merge(...topics.map(this.getOrCreateObservable));
    }
}
exports.default = IEXClientRT;
//# sourceMappingURL=data:application/json;base64,