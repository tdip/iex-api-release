"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const socket_io_client_1 = require("socket.io-client");
/**
 * Create an entry containing an observer that will emit values
 * produced by Socket.IO
 * @param handler Object specified what to do when the first observer
 * subscribes to the topic or when all observers unsubscribe
 */
const createEntry = (handler) => {
    const observers = [];
    const observable = rxjs_1.Observable.create((observer) => {
        observers.push(observer);
        if (observers.length === 1) {
            handler.onResumend();
        }
        return () => {
            const ix = observers.findIndex(_observer => observer === _observer);
            if (ix >= 0) {
                observers.splice(ix, 1);
                if (observers.length === 0) {
                    handler.onEmpty();
                }
            }
        };
    });
    return {
        observable,
        next(value) {
            observers.forEach(o => o.next(value));
        },
        complete() {
            observers.forEach(o => o.complete());
            observers.splice(0, observers.length);
        },
        get count() {
            return observers.length;
        }
    };
};
const endpoint = 'https://ws-api.iextrading.com/1.0/tops';
/**
 * Client for observing realtime data streams
 * produced by IEX.
 */
class IEXClientRT {
    constructor(socketBuilder) {
        this.onConnect = this.onConnect.bind(this);
        this.onMessage = this.onMessage.bind(this);
        this.subscribePending = this.subscribePending.bind(this);
        this.subscribeIfReady = this.subscribeIfReady.bind(this);
        this.getOrCreateObservable = this.getOrCreateObservable.bind(this);
        this.observe = this.observe.bind(this);
        this.isReady = false;
        this.subscriptions = {};
        socketBuilder = socketBuilder || socket_io_client_1.default;
        this.socket = socketBuilder(endpoint);
        this.socket.on('connect', this.onConnect);
        this.socket.on('message', this.onMessage);
    }
    onMessage(_message) {
        const message = JSON.parse(_message);
        const topic = message.symbol;
        const entry = this.subscriptions[topic];
        if (entry) {
            entry.next(message);
        }
    }
    onConnect() {
        this.isReady = true;
        this.subscribePending();
    }
    subscribePending() {
        const pending = Object.keys(this.subscriptions)
            .filter(key => this.subscriptions[key].count > 0);
        if (pending.length > 0) {
            this.socket.emit('subscribe', pending.join());
        }
    }
    subscribeIfReady(topic) {
        if (!this.isReady) {
            return;
        }
        this.socket.emit('subscribe', topic);
    }
    getOrCreateObservable(topic) {
        topic = topic.toUpperCase();
        let observable = this.subscriptions[topic];
        if (!observable) {
            this.subscriptions[topic] = observable = createEntry({
                onResumend: () => this.subscribeIfReady(topic),
                onEmpty: () => this.socket.emit('unsubscribe', topic)
            });
        }
        return observable.observable;
    }
    /**
     * Get an Observable that produces values whenever one of the
     * securities passed as parameter changes
     * @param topics The securities one wishes to subscribe
     */
    observe(...topics) {
        return rxjs_1.merge(...topics.map(this.getOrCreateObservable));
    }
}
exports.default = IEXClientRT;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSUVYQ2xpZW50UlQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvSUVYQ2xpZW50UlQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBa0Q7QUFDbEQsdURBQXVDO0FBb0J2Qzs7Ozs7R0FLRztBQUNILE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBcUIsRUFBRSxFQUFFO0lBQzFDLE1BQU0sU0FBUyxHQUEyQyxFQUFFLENBQUM7SUFDN0QsTUFBTSxVQUFVLEdBQUcsaUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUF5QyxFQUFFLEVBQUU7UUFDL0UsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QixJQUFHLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFDO1lBQ3RCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUN4QjtRQUVELE9BQU8sR0FBRyxFQUFFO1lBQ1IsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUVwRSxJQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUM7Z0JBQ1AsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRXhCLElBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUM7b0JBQ3RCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDckI7YUFDSjtRQUNMLENBQUMsQ0FBQTtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNILFVBQVU7UUFDVixJQUFJLENBQUMsS0FBNEI7WUFDN0IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO1FBQ0QsUUFBUTtZQUNKLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNyQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUNELElBQUksS0FBSztZQUNMLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUM1QixDQUFDO0tBQ0osQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVELE1BQU0sUUFBUSxHQUFHLHdDQUF3QyxDQUFDO0FBSTFEOzs7R0FHRztBQUNIO0lBUUksWUFBWSxhQUErQjtRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN4QixhQUFhLEdBQUcsYUFBYSxJQUFJLDBCQUFRLENBQUM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxTQUFTLENBQUMsUUFBZ0I7UUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsSUFBRyxLQUFLLEVBQUM7WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVPLFNBQVM7UUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RCxJQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNqRDtJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxLQUFhO1FBQ2xDLElBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDO1lBQ2IsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxLQUFhO1FBQ3ZDLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxJQUFHLENBQUMsVUFBVSxFQUFDO1lBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLEdBQUcsV0FBVyxDQUFDO2dCQUNqRCxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztnQkFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUM7YUFDeEQsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxPQUFPLENBQUMsR0FBRyxNQUFnQjtRQUM5QixPQUFPLFlBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUE3RUQsOEJBNkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcydcbmltcG9ydCBzb2NrZXRJTyBmcm9tICdzb2NrZXQuaW8tY2xpZW50J1xuXG5pbXBvcnQgeyBSZWFsdGltZVF1b3RlUmVzcG9uc2UgfSBmcm9tICcuL2FwaXMvc3RvY2tzJ1xuXG5pbnRlcmZhY2UgU3Vic2NyaXB0aW9uRW50cnl7XG4gICAgcmVhZG9ubHkgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxSZWFsdGltZVF1b3RlUmVzcG9uc2U+LFxuICAgIG5leHQodmFsdWU6IFJlYWx0aW1lUXVvdGVSZXNwb25zZSk6IGFueSxcbiAgICBjb21wbGV0ZSgpOiBhbnksXG4gICAgcmVhZG9ubHkgY291bnQ6IG51bWJlclxufVxuXG5pbnRlcmZhY2UgU3Vic2NyaXB0aW9uc3tcbiAgICBbdG9waWM6IHN0cmluZ106IFN1YnNjcmlwdGlvbkVudHJ5XG59XG5cbmludGVyZmFjZSBFbnRyeUhhbmRsZXJ7XG4gICAgb25FbXB0eSgpOiBhbnksXG4gICAgb25SZXN1bWVuZCgpOiBhbnlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZW50cnkgY29udGFpbmluZyBhbiBvYnNlcnZlciB0aGF0IHdpbGwgZW1pdCB2YWx1ZXNcbiAqIHByb2R1Y2VkIGJ5IFNvY2tldC5JT1xuICogQHBhcmFtIGhhbmRsZXIgT2JqZWN0IHNwZWNpZmllZCB3aGF0IHRvIGRvIHdoZW4gdGhlIGZpcnN0IG9ic2VydmVyXG4gKiBzdWJzY3JpYmVzIHRvIHRoZSB0b3BpYyBvciB3aGVuIGFsbCBvYnNlcnZlcnMgdW5zdWJzY3JpYmVcbiAqL1xuY29uc3QgY3JlYXRlRW50cnkgPSAoaGFuZGxlcjogRW50cnlIYW5kbGVyKSA9PiB7XG4gICAgY29uc3Qgb2JzZXJ2ZXJzOiBBcnJheTxPYnNlcnZlcjxSZWFsdGltZVF1b3RlUmVzcG9uc2U+PiA9IFtdO1xuICAgIGNvbnN0IG9ic2VydmFibGUgPSBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IE9ic2VydmVyPFJlYWx0aW1lUXVvdGVSZXNwb25zZT4pID0+IHtcbiAgICAgICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICBpZihvYnNlcnZlcnMubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgIGhhbmRsZXIub25SZXN1bWVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl4ID0gb2JzZXJ2ZXJzLmZpbmRJbmRleChfb2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIgPT09IF9vYnNlcnZlcik7XG5cbiAgICAgICAgICAgIGlmKGl4ID49IDApe1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaXgsIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYob2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25FbXB0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2JzZXJ2YWJsZSxcbiAgICAgICAgbmV4dCh2YWx1ZTogUmVhbHRpbWVRdW90ZVJlc3BvbnNlKXtcbiAgICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKG8gPT4gby5uZXh0KHZhbHVlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlKCl7XG4gICAgICAgICAgICBvYnNlcnZlcnMuZm9yRWFjaChvID0+IG8uY29tcGxldGUoKSk7XG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY291bnQoKXtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBlbmRwb2ludCA9ICdodHRwczovL3dzLWFwaS5pZXh0cmFkaW5nLmNvbS8xLjAvdG9wcyc7XG5cbmV4cG9ydCB0eXBlIFNvY2tldElPQnVpbGRlciA9IChlbmRwb2ludDogc3RyaW5nKSA9PiBTb2NrZXRJT0NsaWVudC5Tb2NrZXQ7XG5cbi8qKlxuICogQ2xpZW50IGZvciBvYnNlcnZpbmcgcmVhbHRpbWUgZGF0YSBzdHJlYW1zXG4gKiBwcm9kdWNlZCBieSBJRVguXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElFWENsaWVudFJUe1xuXG4gICAgcHJpdmF0ZSBpc1JlYWR5OiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzb2NrZXQ6IFNvY2tldElPQ2xpZW50LlNvY2tldDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKHNvY2tldEJ1aWxkZXI/OiBTb2NrZXRJT0J1aWxkZXIpe1xuICAgICAgICB0aGlzLm9uQ29ubmVjdCA9IHRoaXMub25Db25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25NZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVQZW5kaW5nID0gdGhpcy5zdWJzY3JpYmVQZW5kaW5nLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlSWZSZWFkeSA9IHRoaXMuc3Vic2NyaWJlSWZSZWFkeS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmdldE9yQ3JlYXRlT2JzZXJ2YWJsZSA9IHRoaXMuZ2V0T3JDcmVhdGVPYnNlcnZhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZSA9IHRoaXMub2JzZXJ2ZS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICAgICAgc29ja2V0QnVpbGRlciA9IHNvY2tldEJ1aWxkZXIgfHwgc29ja2V0SU87XG4gICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0QnVpbGRlcihlbmRwb2ludCk7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdjb25uZWN0JywgdGhpcy5vbkNvbm5lY3QpO1xuICAgICAgICB0aGlzLnNvY2tldC5vbignbWVzc2FnZScsIHRoaXMub25NZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTWVzc2FnZShfbWVzc2FnZTogc3RyaW5nKXtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoX21lc3NhZ2UpO1xuICAgICAgICBjb25zdCB0b3BpYyA9IG1lc3NhZ2Uuc3ltYm9sO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuc3Vic2NyaXB0aW9uc1t0b3BpY107XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICAgIGVudHJ5Lm5leHQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ29ubmVjdCgpe1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnN1YnNjcmliZVBlbmRpbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN1YnNjcmliZVBlbmRpbmcoKXtcbiAgICAgICAgY29uc3QgcGVuZGluZyA9IE9iamVjdC5rZXlzKHRoaXMuc3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIC5maWx0ZXIoa2V5ID0+IHRoaXMuc3Vic2NyaXB0aW9uc1trZXldLmNvdW50ID4gMCk7XG5cbiAgICAgICAgaWYocGVuZGluZy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3N1YnNjcmliZScsIHBlbmRpbmcuam9pbigpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3Vic2NyaWJlSWZSZWFkeSh0b3BpYzogc3RyaW5nKXtcbiAgICAgICAgaWYoIXRoaXMuaXNSZWFkeSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvY2tldC5lbWl0KCdzdWJzY3JpYmUnLCB0b3BpYyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPckNyZWF0ZU9ic2VydmFibGUodG9waWM6IHN0cmluZyk6IE9ic2VydmFibGU8UmVhbHRpbWVRdW90ZVJlc3BvbnNlPntcbiAgICAgICAgdG9waWMgPSB0b3BpYy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBsZXQgb2JzZXJ2YWJsZSA9IHRoaXMuc3Vic2NyaXB0aW9uc1t0b3BpY107XG5cbiAgICAgICAgaWYoIW9ic2VydmFibGUpe1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW3RvcGljXSA9IG9ic2VydmFibGUgPSBjcmVhdGVFbnRyeSh7XG4gICAgICAgICAgICAgICAgb25SZXN1bWVuZDogKCkgPT4gdGhpcy5zdWJzY3JpYmVJZlJlYWR5KHRvcGljKSxcbiAgICAgICAgICAgICAgICBvbkVtcHR5OiAoKSA9PiB0aGlzLnNvY2tldC5lbWl0KCd1bnN1YnNjcmliZScsIHRvcGljKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBPYnNlcnZhYmxlIHRoYXQgcHJvZHVjZXMgdmFsdWVzIHdoZW5ldmVyIG9uZSBvZiB0aGVcbiAgICAgKiBzZWN1cml0aWVzIHBhc3NlZCBhcyBwYXJhbWV0ZXIgY2hhbmdlc1xuICAgICAqIEBwYXJhbSB0b3BpY3MgVGhlIHNlY3VyaXRpZXMgb25lIHdpc2hlcyB0byBzdWJzY3JpYmVcbiAgICAgKi9cbiAgICBwdWJsaWMgb2JzZXJ2ZSguLi50b3BpY3M6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxSZWFsdGltZVF1b3RlUmVzcG9uc2U+e1xuICAgICAgICByZXR1cm4gbWVyZ2UoLi4udG9waWNzLm1hcCh0aGlzLmdldE9yQ3JlYXRlT2JzZXJ2YWJsZSkpO1xuICAgIH1cbn0iXX0=